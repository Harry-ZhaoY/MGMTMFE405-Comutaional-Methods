matplot(matrix(t,6,9), tao1, type ="l", lwd = 3, lty=1)
matplot(matrix(t,6,8), tao2, type ="l", lwd = 3, lty=1)
default <- rep(list(rep(list(rep(list(),length(lambda2))),length(lambda1))),length(t))
for (s in 1:length(t)){
for (i in 1:length(lambda1)){
paths <- vPaths(v0, mu, sigma, gamma, t[s], lambda1[i], nSim, n[s])
for (j in 1:length(lambda2)){
default[[s]][[i]][[j]] <- defaultOption(paths, lambda2[j], t[s], L0, r0, delta, alpha, epsilon)
}
}
}
nSim <- 100000
# run simulations
default <- rep(list(rep(list(rep(list(),length(lambda2))),length(lambda1))),length(t))
for (s in 1:length(t)){
for (i in 1:length(lambda1)){
paths <- vPaths(v0, mu, sigma, gamma, t[s], lambda1[i], nSim, n[s])
for (j in 1:length(lambda2)){
default[[s]][[i]][[j]] <- defaultOption(paths, lambda2[j], t[s], L0, r0, delta, alpha, epsilon)
}
}
}
default
default <- rep(list(rep(list(rep(list(),length(lambda2))),length(lambda1))),length(t))
for (s in 1:length(t)){
for (i in 1:length(lambda1)){
paths <- vPaths(v0, mu, sigma, gamma, t[s], lambda1[i], nSim, n[s])
for (j in 1:length(lambda2)){
cat("s=",s, " i=",i, " j=",j,"\n")
default[[s]][[i]][[j]] <- defaultOption(paths, lambda2[j], t[s], L0, r0, delta, alpha, epsilon)
}
}
}
value1 <- diag(0, length(t), length(lambda2))
for (s in 1:length(t)){
for (j in 1:length(lambda2)) {
value1[s,j] <- default[[s]][[which(lambda1==.2)]][[j]][1]
}
}
value2 <- diag(0, length(t), length(lambda1))
for (s in 1:length(t)){
for (i in 1:length(lambda1)) {
value2[s,i] <- default[[s]][[i]][[which(lambda2==0.4)]][1]
}
}
par(mfrow=c(1,2))
matplot("T"=matrix(t,6,9), value1, type ="l", lwd = 3, lty=1, main = "Value by time, lambda1 = .2, lambda2 = [0, .1, ..., .7, .8]")
matplot("T"=matrix(t,6,8), value2, type ="l", lwd = 3, lty=1, main = "Value by time, lambda1 = [.05, .01, ..., .35, .4], lambda2 = .7")
matplot(Time=matrix(t,6,9), value1, type ="l", lwd = 3, lty=1, main = "Value by time, lambda1 = .2, lambda2 = [0, .1, ..., .7, .8]")
matplot(Time=matrix(t,6,8), value2, type ="l", lwd = 3, lty=1, main = "Value by time, lambda1 = [.05, .01, ..., .35, .4], lambda2 = .7")
prob1 <- diag(0, length(t), length(lambda2))
for (s in 1:length(t)){
for (j in 1:length(lambda2)) {
prob1[s,j] <- default[[s]][[which(lambda1==.2)]][[j]][2]
}
}
prob2 <- diag(0, length(t), length(lambda1))
for (s in 1:length(t)){
for (i in 1:length(lambda1)) {
prob2[s,i] <- default[[s]][[i]][[which(lambda2==0.4)]][2]
}
}
matplot(matrix(t,6,9), prob1, type ="l", lwd = 3, lty=1)
matplot(matrix(t,6,8), prob2, type ="l", lwd = 3, lty=1)
tao1 <- diag(0, length(t), length(lambda2))
for (s in 1:length(t)){
for (j in 1:length(lambda2)) {
tao1[s,j] <- default[[s]][[which(lambda1==.2)]][[j]][3]
}
}
tao2 <- diag(0, length(t), length(lambda1))
for (s in 1:length(t)){
for (i in 1:length(lambda1)) {
tao2[s,i] <- default[[s]][[i]][[which(lambda2==0.4)]][3]
}
}
matplot(matrix(t,6,9), tao1, type ="l", lwd = 3, lty=1)
matplot(matrix(t,6,8), tao2, type ="l", lwd = 3, lty=1)
matplot(Time = matrix(t,6,9), prob1, type ="l", lwd = 3, lty=1, main = "Value by time, lambda1 = .2, lambda2 = [0, .1, ..., .7, .8]")
matplot(Time = matrix(t,6,8), prob2, type ="l", lwd = 3, lty=1, main = "Value by time, lambda1 = [.05, .01, ..., .35, .4], lambda2 = .7")
matplot(matrix(t,6,8), prob2, type ="l", lwd = 3, lty=1,xlab = "Time", main = "Default Prob. by time, changing lambda1, lambda2 = .7")
matplot(matrix(t,6,9), prob1, type ="l", lwd = 3, lty=1,xlab = "Time", main = "Default Prob. by time, lambda1 = .2, changing lambda2")
matplot(matrix(t,6,8), prob2, type ="l", lwd = 3, lty=1,xlab = "Time", main = "Default Prob. by time, changing lambda1, lambda2 = .7")
par(mfrow=c(1,2))
matplot(matrix(t,6,9), prob1, type ="l", lwd = 3, lty=1,xlab = "Time", main = "Default Prob. by time, lambda1 = .2, changing lambda2")
matplot(matrix(t,6,8), prob2, type ="l", lwd = 3, lty=1,xlab = "Time", main = "Default Prob. by time, changing lambda1, lambda2 = .7")
value1 <- diag(0, length(t), length(lambda2))
for (s in 1:length(t)){
for (j in 1:length(lambda2)) {
value1[s,j] <- default[[s]][[which(lambda1==.2)]][[j]][1]
}
}
value2 <- diag(0, length(t), length(lambda1))
for (s in 1:length(t)){
for (i in 1:length(lambda1)) {
value2[s,i] <- default[[s]][[i]][[which(lambda2==0.4)]][1]
}
}
par(mfrow=c(1,2))
matplot(matrix(t,6,9), value1, type ="l", lwd = 3, lty=1, xlab = "Time", main = "Value by time, lambda1 = .2, changing lambda2")
matplot(matrix(t,6,8), value2, type ="l", lwd = 3, lty=1, xlab = "Time", main = "Value by time, changing lambda1, lambda2 = .7")
# (b)
prob1 <- diag(0, length(t), length(lambda2))
for (s in 1:length(t)){
for (j in 1:length(lambda2)) {
prob1[s,j] <- default[[s]][[which(lambda1==.2)]][[j]][2]
}
}
prob2 <- diag(0, length(t), length(lambda1))
for (s in 1:length(t)){
for (i in 1:length(lambda1)) {
prob2[s,i] <- default[[s]][[i]][[which(lambda2==0.4)]][2]
}
}
par(mfrow=c(1,2))
matplot(matrix(t,6,9), prob1, type ="l", lwd = 3, lty=1, xlab = "Time", main = "Default Prob. by time, lambda1 = .2, changing lambda2")
matplot(matrix(t,6,8), prob2, type ="l", lwd = 3, lty=1, xlab = "Time", main = "Default Prob. by time, changing lambda1, lambda2 = .7")
# (c)
tao1 <- diag(0, length(t), length(lambda2))
for (s in 1:length(t)){
for (j in 1:length(lambda2)) {
tao1[s,j] <- default[[s]][[which(lambda1==.2)]][[j]][3]
}
}
tao2 <- diag(0, length(t), length(lambda1))
for (s in 1:length(t)){
for (i in 1:length(lambda1)) {
tao2[s,i] <- default[[s]][[i]][[which(lambda2==0.4)]][3]
}
}
par(mfrow=c(1,2))
matplot(matrix(t,6,9), tao1, type ="l", lwd = 3, lty=1, xlab = "Time", main = "Default Prob. by time, lambda1 = .2, changing lambda2")
matplot(matrix(t,6,8), tao2, type ="l", lwd = 3, lty=1, xlab = "Time", main = "Default Prob. by time, changing lambda1, lambda2 = .7")
default[[which(t==5)]][[which(lambda1==.2)]][[which(lambda2==.4)]]
##### Question 1 #####
# set parameters
s0 <- 98
x <- 100
r <- .03
t <- 1
sigma <- seq(.12, .48, .04)
nSim <- 10000
n <- 200
type <- c("call", "put")
# run simulation
q1 <- rep(list(rep(0,length(sigma))),2)
for (i in 1:2){
for (j in 1:length(sigma)){
q1[[i]][j] <- fsLookback(s0, x, r, sigma[j], t, nSim, n, type[i])
}
}
# plot
plot(sigma, q1[[1]], type = "l", lwd = 3, col = "firebrick2",
main = "Fixed Strike Lookback Call and Put", xlab = "Price")
lines(sigma, q1[[2]], type = "l", lwd = 3, col = "dodgerblue4")
legend("bottomright", legend = c("call", "put"), lwd = 3,
col = c("firebrick2", "dodgerblue4"))
par(mfrow=1)
par(mfrow=c(1))
par(mfrow=c(1,1))
##### Question 1 #####
# plot
plot(sigma, q1[[1]], type = "l", lwd = 3, col = "firebrick2",
main = "Fixed Strike Lookback Call and Put", xlab = "Price")
lines(sigma, q1[[2]], type = "l", lwd = 3, col = "dodgerblue4")
legend("bottomright", legend = c("call", "put"), lwd = 3,
col = c("firebrick2", "dodgerblue4"))
lambda1 <- seq(0.05, 0.4, 0.05)
lambda2 <- seq(0, 0.8, 0.1)
t <- 3:8
v0 <- 20000
L0 <- 22000
r0 <- .02
mu <- -.1
sigma <- .2
gamma <- -.4
delta <- .25
alpha <- .7
epsilon <- .95
nSim <- 100000
n <- t*12
# run simulations
default <- rep(list(rep(list(rep(list(),length(lambda2))),length(lambda1))),length(t))
for (s in 1:length(t)){
for (i in 1:length(lambda1)){
paths <- vPaths(v0, mu, sigma, gamma, t[s], lambda1[i], nSim, n[s])
for (j in 1:length(lambda2)){
cat("s=",s, " i=",i, " j=",j,"\n")
default[[s]][[i]][[j]] <- defaultOption(paths, lambda2[j], t[s], L0, r0, delta, alpha, epsilon)
}
}
}
##### Question 1 #####
# set parameters
s0 <- 98
x <- 100
r <- .03
t <- 1
sigma <- seq(.12, .48, .04)
nSim <- 10000
n <- 200
type <- c("call", "put")
# run simulation
q1 <- rep(list(rep(0,length(sigma))),2)
for (i in 1:2){
for (j in 1:length(sigma)){
q1[[i]][j] <- fsLookback(s0, x, r, sigma[j], t, nSim, n, type[i])
}
}
# plot
plot(sigma, q1[[1]], type = "l", lwd = 3, col = "firebrick2",
main = "Fixed Strike Lookback Call and Put", xlab = "Price")
lines(sigma, q1[[2]], type = "l", lwd = 3, col = "dodgerblue4")
legend("bottomright", legend = c("call", "put"), lwd = 3,
col = c("firebrick2", "dodgerblue4"))
##### Question 1 #####
# set parameters
s0 <- 98
x <- 100
r <- .03
t <- 1
sigma <- seq(.12, .48, .04)
nSim <- 10000
n <- 200
type <- c("call", "put")
# run simulation
q1 <- rep(list(rep(0,length(sigma))),2)
for (i in 1:2){
for (j in 1:length(sigma)){
q1[[i]][j] <- fsLookback(s0, x, r, sigma[j], t, nSim, n, type[i])
}
}
# plot
plot(sigma, q1[[1]], type = "l", lwd = 3, col = "firebrick2",
main = "Fixed Strike Lookback Call and Put", xlab = "Price")
lines(sigma, q1[[2]], type = "l", lwd = 3, col = "dodgerblue4")
legend("bottomright", legend = c("call", "put"), lwd = 3,
col = c("firebrick2", "dodgerblue4"), xlab = "Option Price")
# plot
plot(sigma, q1[[1]], type = "l", lwd = 3, col = "firebrick2",
main = "Fixed Strike Lookback Call and Put", xlab = "Price")
lines(sigma, q1[[2]], type = "l", lwd = 3, col = "dodgerblue4")
legend("bottomright", legend = c("call", "put"), lwd = 3,
col = c("firebrick2", "dodgerblue4",xlab = "Option Price"))
# plot
plot(sigma, q1[[1]], type = "l", lwd = 3, col = "firebrick2",
main = "Fixed Strike Lookback Call and Put", xlab = "Price",ylab = "Option Price"))
lines(sigma, q1[[2]], type = "l", lwd = 3, col = "dodgerblue4")
legend("bottomright", legend = c("call", "put"), lwd = 3,
col = c("firebrick2", "dodgerblue4")
# plot
plot(sigma, q1[[1]], type = "l", lwd = 3, col = "firebrick2",
main = "Fixed Strike Lookback Call and Put", xlab = "Price",ylab = "Option Price")
lines(sigma, q1[[2]], type = "l", lwd = 3, col = "dodgerblue4")
legend("bottomright", legend = c("call", "put"), lwd = 3,
col = c("firebrick2", "dodgerblue4"))
# plot
plot(sigma, q1[[1]], type = "l", lwd = 3, col = "firebrick2",
main = "Fixed Strike Lookback Call and Put", xlab = "Price", ylab = "Option Price")
lines(sigma, q1[[2]], type = "l", lwd = 3, col = "dodgerblue4")
legend("bottomright", legend = c("call", "put"), lwd = 3,
col = c("firebrick2", "dodgerblue4"))
matplot(matrix(t,6,9), value1, type ="l", lwd = 3, lty=1, xlab = "Time", main = "Value by time, lambda1 = .2, changing lambda2")
legend("bottomright", legend = lambda1)
par(mfrow=c(1,2))
matplot(matrix(t,6,9), value1, type ="l", lwd = 3, lty=1, xlab = "Time", main = "Value by time, lambda1 = .2, changing lambda2")
legend("bottomright", legend = lambda1, lwd = 3)
readRDS("C:/Users/harry/OneDrive/Documents/GitHub/MGMTMFE405-Comutaional-Methods/Project5/1a")
readRDS("C:/Users/harry/OneDrive/Documents/GitHub/MGMTMFE405-Comutaional-Methods/Project5/1a.rds")
readRDS("C:/Users/harry/OneDrive/Documents/GitHub/MGMTMFE405-Comutaional-Methods/Project5/1b.rds")
readRDS("C:/Users/harry/OneDrive/Documents/GitHub/MGMTMFE405-Comutaional-Methods/Project5/1c.rds")
setwd("C:/Users/harry/OneDrive/Documents/GitHub/MGMTMFE405-Comutaional-Methods/Project9/")
source('abs.R')
##### Question 1 #####
# a)
source("promptMbs.R")
kappa <- c(0.3,0.4)
q1b <- c()
for (k in kappa) {
value <- findMBS(kappa=k)
q1b <- c(q1b, value)
}
q1b <- c()
for (k in kappa) {
value <- findMBS(kappa=k, nSim = 40000)
q1b <- c(q1b, value)
}
plot(x= kappa, y = q1b, type = "l", lwd = 3, col = "dodgerblue4",
main = "MBS Price vs. Kappa", ylab = "PV0", xlab = "Kappa")
q1b
r0 = 0.078
kapa = 0.6
r_c = 0.08
sig = 0.12
WAC = 0.08
pv0 = 100000
# CIR model for r simulation, this one returns a matrix of many paths
r_sim_cir = function(kapa, r0, r_c, sig, Time, path){
dt = 1/12
steps = Time*12
r = matrix(rep(r0, path), ncol = 1)
for (i in 2:steps){
z = rnorm(path,0,1)
term = sign(r[,i-1])*sqrt(abs(r[,i-1]))
newCol = r[, i-1] + kapa*(r_c - r[, i-1])*dt + sig*term*sqrt(dt)*z
r = cbind(r, newCol)
}
return(r)
}
# calculating the bond prices with explicit method
bond_price = function(kapa, r0, r_c, sig, T){
h1 = sqrt(kapa^2+2*sig^2)
h2 = (kapa + h1)/2
h3 = 2*kapa*r_c/(sig^2)
B = (exp(h1*T) - 1) / (h2 * (exp(h1*T) - 1) + h1)
A = (h1*exp(h2*T)/(h2 * (exp(h1*T) - 1) + h1))^h3
return(1*A*exp(-B*r0))
}
# numerix way of calculating MBS
numerix_fun = function(kapa, r0, r_c, sig, pv0, WAC, T, path){
set.seed(12345)
n = T*12
r = WAC/12
pv = pv0
SY = c(0.94, 0.76, 0.74, 0.95, 0.98, 0.92, 0.98, 1.10, 1.18, 1.22, 1.23, 0.98)
ct = vector()
r_path = r_sim_cir(kapa, r0, r_c, sig, 30, path)
for(i in 1:n){
bondPrice = bond_price(kapa, r_path[, i], r_c, sig, 10)
r10 = mean(-log(bondPrice)/10)
RI = 0.28 + 0.14*atan(-8.57 + 430*(WAC - r10))
BU = 0.3 + 0.7 * pv/pv0
SG = min(1, i/30)
CPR = RI*BU*SG*SY[ifelse(i %% 12 == 0, 12, i%%12)]
IP = pv*r
TPP = pv*r*(1/(1-(1+r)^(-n+i-1))-1) + (pv-pv*r*(1/(1-(1+r)^(-n+i-1))-1))*(1-(1-CPR)^(1/12))
ct[i] = TPP + IP
pv = pv - TPP
}
p = 0
rSum = rep(0, path)
for(i in 1:n){
# accumulating dr to get r
rSum = rSum + r_path[,i]
p = p + mean(ct[i]*exp(-1*rSum/12))
}
return(p)
}
# Problem 1
k_range = seq(0.3, 0.9, 0.1)
p1b = vector()
p1b = sapply(k_range, numerix_fun, r0=r0, r_c=r_c, sig=sig, pv0=pv0, WAC=WAC, T=30, path=20000)
plot(k_range, p1b, type = 'l', main = 'MBS price vs. k', col='red', ylab = 'MBS Price', xlab = 'k')
# (c)
r_c_range = seq(0.03, 0.09, 0.01)
p1c = vector()
p1c = sapply(r_c_range, numerix_fun, kapa=kapa, r0=r0, sig=sig, pv0=pv0, WAC=WAC, T=30, path=20000)
plot(r_c_range, p1c, type = 'l', main = 'MBS price vs. r_bar', col='blue', ylab = 'MBS Price', xlab = 'r_bar')
# (d)
sig_range = seq(0.1 ,0.2 ,0.01)
p1d = vector()
p1d = sapply(sig_range, numerix_fun, kapa=kapa, r0=r0, r_c=r_c, pv0=pv0, WAC=WAC, T=30, path=20000)
plot(sig_range, p1d, type = 'l', main = 'MBS price vs. sigma', col='orange', ylab = 'MBS Price', xlab = 'sigma')
# Problem 2
numerix_OAS = function(kapa, r0, r_c, sig, pv0, WAC, T, path, x){
n = T*12
r = WAC/12
pv = pv0
SY = c(0.94, 0.76, 0.74, 0.95, 0.98, 0.92, 0.98, 1.10, 1.18, 1.22, 1.23, 0.98)
ct = vector()
r_path = r_sim_cir(kapa, r0, r_c, sig, 30, path)
for(i in 1:n){
bondPrice = bond_price(kapa, r_path[, i], r_c, sig, 10)
r10 = mean(-log(bondPrice)/10)
RI = 0.28 + 0.14*atan(-8.57 + 430*(WAC - r10))
BU = 0.3 + 0.7 * pv/pv0
SG = min(1, i/30)
CPR = RI*BU*SG*SY[ifelse(i %% 12 == 0, 12, i%%12)]
IP = pv*r
TPP = pv*r*(1/(1-(1+r)^(-n+i-1))-1) + (pv-pv*r*(1/(1-(1+r)^(-n+i-1))-1))*(1-(1-CPR)^(1/12))
ct[i] = TPP + IP
pv = pv - TPP
}
p = 0
rSum = rep(0, path)
for(i in 1:n){
# accumulating dr to get r
rSum = rSum + r_path[,i] + x
p = p + mean(ct[i]*exp(-1*rSum/12))
}
return(p)
}
marketPrice = 110000
# Optimization function for getting the OAS that match with the market price of 110000
OAS = optimize(function(x){abs(numerix_OAS(kapa, r0, r_c, sig, pv0, WAC, 30, 100000, x)-marketPrice)}, c(-1,1))
# The OAS x spread is around
OAS$minimum
# Problem 3
x_OAS = OAS$minimum
y = 0.005
p_m = numerix_OAS(kapa, r0, r_c, sig, pv0, WAC, 30, 100000, x_OAS - y)
p_p = numerix_OAS(kapa, r0, r_c, sig, pv0, WAC, 30, 100000, x_OAS + y)
OAS_duration = (p_m - p_p)/(2*y*marketPrice)
OAS_convexity = (p_m + p_p - 2*marketPrice)/(2*marketPrice*y^2)
# Duration and Convexity are
OAS_duration
OAS_convexity
y = 0.0005
p_m = numerix_OAS(kapa, r0, r_c, sig, pv0, WAC, 30, 100000, x_OAS - y)
p_p = numerix_OAS(kapa, r0, r_c, sig, pv0, WAC, 30, 100000, x_OAS + y)
OAS_duration = (p_m - p_p)/(2*y*marketPrice)
OAS_convexity = (p_m + p_p - 2*marketPrice)/(2*marketPrice*y^2)
# Duration and Convexity are
OAS_duration
OAS_convexity
x_OAS
y = 0.001
p_m
p_p
p_m = numerix_OAS(kapa, r0, r_c, sig, pv0, WAC, 30, 100000, x_OAS - y)
p_p = numerix_OAS(kapa, r0, r_c, sig, pv0, WAC, 30, 100000, x_OAS + y)
OAS_duration = (p_m - p_p)/(2*y*marketPrice)
OAS_convexity = (p_m + p_p - 2*marketPrice)/(2*marketPrice*y^2)
# Duration and Convexity are
OAS_duration
OAS_convexity
findMBS(kappa=0.3)
source('abs.R')
findMBS(kappa=0.3)
source('abs.R')
findMBS(kappa=0.3)
plot(r10_vec, type = "l")
warnings()
r10
source('abs.R')
source('abs.R')
findMBS(kappa=0.3)
plot(r10_vec, type = "l")
p1b
numerix_fun(.3, r0, r_c, sig, pv0, WAC, 30, 50000)
numerix_fun(.2, r0, r_c, sig, pv0, WAC, 30, 50000)
plot(k_range, p1b, type = 'l', main = 'MBS Price vs. Kappa', col='dodgerblue4', ylab = 'PV0', xlab = 'Kappa', lwd = 3)
plot(sig_range, p1d, type = 'l', main = 'MBS Price vs. Sigma', col='darkorchid4', ylab = 'PV0', xlab = 'sigma', lwd = 3)
numerix_fun = function(kapa, r0, r_c, sig, pv0, WAC, T, path){
set.seed(12345)
n = T*12
r = WAC/12
pv = pv0
SY = c(0.94, 0.76, 0.74, 0.95, 0.98, 0.92, 0.98, 1.10, 1.18, 1.22, 1.23, 0.98)
ct = vector()
r_path = r_sim_cir(kapa, r0, r_c, sig, 30, path)
browser()
for(i in 1:n){
bondPrice = bond_price(kapa, r_path[, i], r_c, sig, 10)
r10 = mean(-log(bondPrice)/10)
RI = 0.28 + 0.14*atan(-8.57 + 430*(WAC - r10))
BU = 0.3 + 0.7 * pv/pv0
SG = min(1, i/30)
CPR = RI*BU*SG*SY[ifelse(i %% 12 == 0, 12, i%%12)]
IP = pv*r
TPP = pv*r*(1/(1-(1+r)^(-n+i-1))-1) + (pv-pv*r*(1/(1-(1+r)^(-n+i-1))-1))*(1-(1-CPR)^(1/12))
ct[i] = TPP + IP
pv = pv - TPP
}
p = 0
rSum = rep(0, path)
for(i in 1:n){
# accumulating dr to get r
rSum = rSum + r_path[,i]
p = p + mean(ct[i]*exp(-1*rSum/12))
}
return(p)
}
# (b)
k_range = seq(0.3, 0.9, 0.1)
p1b = vector()
p1b = sapply(k_range, numerix_fun, r0=r0, r_c=r_c, sig=sig, pv0=pv0, WAC=WAC, T=30, path=20000)
kapa
source('abs.R')
sig <- seq(0.1, 0.2, 0.01)
q1d <- c()
for (sigma in sig) {
value <- findMBS(sig = sigma, nSim=200000)
q1d <- c(q1d, value)
}
sig <- seq(0.1, 0.2, 0.01)
q1d <- c()
for (sigma in sig) {
value <- findMBS(sig = sigma)
q1d <- c(q1d, value)
}
plot(x= sig, y = q1d, type = "l", lwd = 3, col = "darkorchid4",
main = "MBS Price vs. Sigma", ylab = "PV0", xlab = "Sigma")
rPaths <- cirPath(r0=.078, sig=.12, kappa=.6, r_bar=.08,t = 40, nSim = 50000)
x <- uniroot(fitOAS, r_t = rPaths, lower = -0.05, upper = 0)$root
##### Question 3 #####
y <- 0.001
p0 <- 110000
p_plus <- fitOAS(x+y, rPaths, expPv = 0)
p_minus <- fitOAS(x-y, rPaths, expPv = 0)
duration <- (p_minus-p_plus)/(2*y*p0)
convexity <- (p_plus+p_minus-2*p0)/(2*p0*y^2)
source('abs.R')
x <- uniroot(fitOAS, r_t = rPaths, lower = -0.05, upper = 0)$root
x <- uniroot(fitOAS, r_t = rPaths, lower = -0.015, upper = 0)$root
##### Question 3 #####
y <- 0.001
p0 <- 110000
p_plus <- fitOAS(x+y, rPaths, expPv = 0)
p_minus <- fitOAS(x-y, rPaths, expPv = 0)
duration <- (p_minus-p_plus)/(2*y*p0)
convexity <- (p_plus+p_minus-2*p0)/(2*p0*y^2)
