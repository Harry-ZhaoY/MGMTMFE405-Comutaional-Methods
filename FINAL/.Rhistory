taoU[i]
(taoL[i]/n)*termT)
(taoL[i]/n)*termT
thisOption <- function(paths, r = 0.05, k = 100, termT = 5, n = 1000){
t <- seq(0,termT,termT/n)
L <- 50*exp(0.138629*t)
U <- 200-50*exp(0.138629*t)
taoL <- apply(paths, 1, function(path){return(which(path<=L)[1])})
taoU <- apply(paths, 1, function(path){return(which(path>=U)[1])})
taoL[which(is.na(taoL))] <- taoU[which(is.na(taoU))]<- n
payoff <- c()
for (i in 1:nrow(paths)){
if (taoL[i]==taoU[i]){
payoff[i] <- 0
} else{
if(taoL[i]<taoU[i]){
payoff[i] <- exp(-r*(taoL[i]/n)*termT)*(k-paths[i,taoL[i]])
} else {
payoff[i] <- exp(-r*(taoU[i]/n)*termT)*(paths[i,taoU[i]]-k)
}
}
}
return(payoff)
}
payoff <- thisOption(thisPaths)
payoff
mean(payoff)
##### Final 3 #####
# stock paths
sPaths <- function(s0 = 100, r = 0.05, sigma = 0.35, t = 5, nSim = 1000, n = 1000){
dt <- t/n
s_sim <- matrix(rep(s0, nSim), ncol = 1)
for (s in 2:(n+1)){
dw <- rnorm(nSim)*sqrt(dt)
# use partial truncation
newCol <- s_sim[,s-1]*(1 + r*dt + sigma*dw)
s_sim <- cbind(s_sim, newCol)
}
return(s_sim)
}
# function to find the price of this specified option
thisOption <- function(paths, r = 0.05, k = 100, termT = 5, n = 1000){
t <- seq(0,termT,termT/n)
L <- 50*exp(0.138629*t)
U <- 200-50*exp(0.138629*t)
taoL <- apply(paths, 1, function(path){return(which(path<=L)[1])})
taoU <- apply(paths, 1, function(path){return(which(path>=U)[1])})
taoL[which(is.na(taoL))] <- taoU[which(is.na(taoU))]<- n
payoff <- c()
for (i in 1:nrow(paths)){
if (taoL[i]==taoU[i]){
payoff[i] <- 0
} else{
if(taoL[i]<taoU[i]){
payoff[i] <- exp(-r*(taoL[i]/n)*termT)*(k-paths[i,taoL[i]])
} else {
payoff[i] <- exp(-r*(taoU[i]/n)*termT)*(paths[i,taoU[i]]-k)
}
}
}
return(list(p = payoff, u = taoU, l = taoL))
}
# main
thisPaths <- sPaths()
payoff <- thisOption(thisPaths)$p
mean(payoff)
out <- thisOption(thisPaths)
# a. price of the option
mean(out$p)
# main
thisPaths <- sPaths()
out <- thisOption(thisPaths)
# a. price of the option
mean(out$p)
# b. prob
sum(out$p!=1000)
# b. prob
sum(out$p==1000)
out$p
# b. prob
sum(out$u==1000)
# b. prob
p1 <- sum(out$l<out$u)
p1
p1 <- sum(out$l<out$u)/n
# b. prob
n <- sum(out$l-out$u!=0)
n
out$l-out$u
p <- sum(out$l<out$u)/n
p
# b. prob
n <- sum(out$p!=0)
n
##### Final 3 #####
# stock paths
sPaths <- function(s0 = 100, r = 0.05, sigma = 0.35, t = 5, nSim = 10000, n = 1000){
dt <- t/n
s_sim <- matrix(rep(s0, nSim), ncol = 1)
for (s in 2:(n+1)){
dw <- rnorm(nSim)*sqrt(dt)
# use partial truncation
newCol <- s_sim[,s-1]*(1 + r*dt + sigma*dw)
s_sim <- cbind(s_sim, newCol)
}
return(s_sim)
}
# function to find the price of this specified option
thisOption <- function(paths, r = 0.05, k = 100, termT = 5, n = 10000){
t <- seq(0,termT,termT/n)
L <- 50*exp(0.138629*t)
U <- 200-50*exp(0.138629*t)
taoL <- apply(paths, 1, function(path){return(which(path<=L)[1])})
taoU <- apply(paths, 1, function(path){return(which(path>=U)[1])})
taoL[which(is.na(taoL))] <- taoU[which(is.na(taoU))]<- n
payoff <- c()
for (i in 1:nrow(paths)){
if (taoL[i]==taoU[i]){
payoff[i] <- 0
} else{
if(taoL[i]<taoU[i]){
payoff[i] <- exp(-r*(taoL[i]/n)*termT)*(k-paths[i,taoL[i]])
} else {
payoff[i] <- exp(-r*(taoU[i]/n)*termT)*(paths[i,taoU[i]]-k)
}
}
}
return(list(p = payoff, u = taoU, l = taoL))
}
# main
thisPaths <- sPaths()
out <- thisOption(thisPaths)
# a. price of the option
mean(out$p)
# b. prob
n <- sum(out$p!=0)
p <- sum(out$l<out$u)/n
# function
q1_payoff <- function(x){
s <- 0
counter <- 0
while (s <= x) {
s <- s+runif(1)
counter <- counter + 1
}
return(counter)
}
# simulation
x <- 1.1
sim <- c()
for(i in 1:10^4){
sim[i] <- q1_payoff(x)
}
out <- mean(ifelse(sim>4.54, sim-4.54, 0))
out
p
mean(out$p)
out
thisPaths <- sPaths()
out <- thisOption(thisPaths)
# a. price of the option
mean(out$p)
# b. prob
n <- sum(out$p!=0)
p <- sum(out$l<out$u)/n
##### Final 3 #####
# stock paths
sPaths <- function(s0 = 100, r = 0.05, sigma = 0.35, t = 5, nSim = 1000, n = 1000){
dt <- t/n
s_sim <- matrix(rep(s0, nSim), ncol = 1)
for (s in 2:(n+1)){
dw <- rnorm(nSim)*sqrt(dt)
# use partial truncation
newCol <- s_sim[,s-1]*(1 + r*dt + sigma*dw)
s_sim <- cbind(s_sim, newCol)
}
return(s_sim)
}
# function to find the price of this specified option
thisOption <- function(paths, r = 0.05, k = 100, termT = 5, n = 1000){
t <- seq(0,termT,termT/n)
L <- 50*exp(0.138629*t)
U <- 200-50*exp(0.138629*t)
taoL <- apply(paths, 1, function(path){return(which(path<=L)[1])})
taoU <- apply(paths, 1, function(path){return(which(path>=U)[1])})
taoL[which(is.na(taoL))] <- taoU[which(is.na(taoU))]<- n
payoff <- c()
for (i in 1:nrow(paths)){
if (taoL[i]==taoU[i]){
payoff[i] <- 0
} else{
if(taoL[i]<taoU[i]){
payoff[i] <- exp(-r*(taoL[i]/n)*termT)*(k-paths[i,taoL[i]])
} else {
payoff[i] <- exp(-r*(taoU[i]/n)*termT)*(paths[i,taoU[i]]-k)
}
}
}
return(list(p = payoff, u = taoU, l = taoL))
}
# main
thisPaths <- sPaths()
out <- thisOption(thisPaths)
# a. price of the option
mean(out$p)
# b. prob
n <- sum(out$p!=0)
p <- sum(out$l<out$u)/n
p
# function
q1_payoff <- function(x){
s <- 0
counter <- 0
while (s <= x) {
s <- s+runif(1)
counter <- counter + 1
}
return(counter)
}
# simulation
x <- 1.1
sim <- c()
for(i in 1:10^4){
sim[i] <- q1_payoff(x)
}
out <- mean(ifelse(sim>4.54, sim-4.54, 0))
out
# function
q1_payoff <- function(x){
s <- 0
counter <- 0
while (s <= x) {
s <- s+runif(1)
counter <- counter + 1
}
return(counter)
}
# simulation
x <- 1.1
sim <- c()
for(i in 1:10^4){
sim[i] <- q1_payoff(x)
}
out <- mean(ifelse(sim>4.54, sim-4.54, 0))
out
# function
q1_payoff <- function(x){
s <- 0
counter <- 0
while (s <= x) {
s <- s+runif(1)
counter <- counter + 1
}
return(counter)
}
# simulation
x <- 1.1
sim <- c()
for(i in 1:10^4){
sim[i] <- q1_payoff(x)
}
out <- mean(ifelse(sim>4.54, sim-4.54, 0))
out
# function for vt and st paths
vsPaths <- function(rho, v0 = 0.06, alpha = 0.45, beta = -5.105, gamma = 0.25, s0 = 20, r = 0.05, t = 2, nSim = 1000, n = 100){
dt <- t/n
s_list <- list()
v_list <- list()
for (i in 1:nSim){
dz1 <- rnorm(n)
dz2 <- rnorm(n)
# find correlated Brownian motions
db <- sqrt(dt)*dz1
dw <- sqrt(dt)*(rho*dz1+sqrt((1-rho^2))*dz2)
# generate paths
s_sim <- rep(s0,n+1)
v_sim <- rep(v0,n+1)
for (s in 2:(n+1)){
# vt path
v_sim[s] <- v_sim[s-1]+(alpha+beta*max(v_sim[s-1],0))*dt + gamma*sqrt(max(v_sim[s-1],0))*db[s-1]
# stock price path
s_sim[s] <- s_sim[s-1]*(1+r*dt + sqrt(max(v_sim[s-1],0))*(dw[s-1]))
}
s_list <- append(s_list, s_sim)
v_list <- append(v_list, v_sim)
}
s_mat <- matrix(unlist(s_list), nSim, n+1, byrow = T)
v_mat <- matrix(unlist(v_list), nSim, n+1, byrow = T)
return(list(st = s_mat, vt = v_mat))
}
# function for floating strike asian call
fsAsianCall <- function(paths){
A <- apply(paths,1,mean)
ST <- paths[,ncol(paths)]
payoff <- ifelse(ST>A, ST-A, 0)
return(mean(payoff))
}
# main
Rho <- c(-0.75,0,0.75)
out <- c()
for (rho in Rho){
paths <- vsPaths(rho)
out <- c(out, fsAsianCall(paths$st))
}
out
# function
q1_payoff <- function(x){
s <- 0
counter <- 0
while (s <= x) {
s <- s+runif(1)
counter <- counter + 1
}
return(counter)
}
# simulation
x <- 1.1
sim <- c()
for(i in 1:10^4){
sim[i] <- q1_payoff(x)
}
out <- mean(ifelse(sim>4.54, sim-4.54, 0))
out
# function for vt and st paths
vsPaths <- function(rho, v0 = 0.06, alpha = 0.45, beta = -5.105, gamma = 0.25, s0 = 20, r = 0.05, t = 2, nSim = 1000, n = 100){
dt <- t/n
s_list <- list()
v_list <- list()
for (i in 1:nSim){
dz1 <- rnorm(n)
dz2 <- rnorm(n)
# find correlated Brownian motions
db <- sqrt(dt)*dz1
dw <- sqrt(dt)*(rho*dz1+sqrt((1-rho^2))*dz2)
# generate paths
s_sim <- rep(s0,n+1)
v_sim <- rep(v0,n+1)
for (s in 2:(n+1)){
# vt path
v_sim[s] <- v_sim[s-1]+(alpha+beta*max(v_sim[s-1],0))*dt + gamma*sqrt(max(v_sim[s-1],0))*db[s-1]
# stock price path
s_sim[s] <- s_sim[s-1]*(1+r*dt + sqrt(max(v_sim[s-1],0))*(dw[s-1]))
}
s_list <- append(s_list, s_sim)
v_list <- append(v_list, v_sim)
}
s_mat <- matrix(unlist(s_list), nSim, n+1, byrow = T)
v_mat <- matrix(unlist(v_list), nSim, n+1, byrow = T)
return(list(st = s_mat, vt = v_mat))
}
# function for floating strike asian call
fsAsianCall <- function(paths){
A <- apply(paths,1,mean)
ST <- paths[,ncol(paths)]
payoff <- ifelse(ST>A, ST-A, 0)
return(mean(payoff))
}
# main
Rho <- c(-0.75,0,0.75)
out <- c()
for (rho in Rho){
paths <- vsPaths(rho)
out <- c(out, fsAsianCall(paths$st))
}
out
for(i in 1:10^5){
sim[i] <- q1_payoff(x)
}
out <- mean(ifelse(sim>4.54, sim-4.54, 0))
out
for(i in 1:10^5){
sim[i] <- q1_payoff(x)
}
out <- mean(ifelse(sim>4.54, sim-4.54, 0))
out
##### Final 3 #####
# stock paths
sPaths <- function(s0 = 100, r = 0.05, sigma = 0.35, t = 5, nSim = 1000, n = 1000){
dt <- t/n
s_sim <- matrix(rep(s0, nSim), ncol = 1)
for (s in 2:(n+1)){
dw <- rnorm(nSim)*sqrt(dt)
# use partial truncation
newCol <- s_sim[,s-1]*(1 + r*dt + sigma*dw)
s_sim <- cbind(s_sim, newCol)
}
return(s_sim)
}
# function to find the price of this specified option
thisOption <- function(paths, r = 0.05, k = 100, termT = 5, n = 1000){
t <- seq(0,termT,termT/n)
L <- 50*exp(0.138629*t)
U <- 200-50*exp(0.138629*t)
taoL <- apply(paths, 1, function(path){return(which(path<=L)[1])})
taoU <- apply(paths, 1, function(path){return(which(path>=U)[1])})
taoL[which(is.na(taoL))] <- taoU[which(is.na(taoU))]<- n
payoff <- c()
for (i in 1:nrow(paths)){
if (taoL[i]==taoU[i]){
payoff[i] <- 0
} else{
if(taoL[i]<taoU[i]){
payoff[i] <- exp(-r*(taoL[i]/n)*termT)*(k-paths[i,taoL[i]])
} else {
payoff[i] <- exp(-r*(taoU[i]/n)*termT)*(paths[i,taoU[i]]-k)
}
}
}
return(list(p = payoff, u = taoU, l = taoL))
}
# main
thisPaths <- sPaths()
out <- thisOption(thisPaths)
# a. price of the option
mean(out$p)
# b. prob
# number of exercise
n <- sum(out$p!=0)
# the conditional prob
p <- sum(out$l<out$u)/n
p
##### Final 4 #####
# function to find prices of a zero coupon bond
zcBond <- function(paths, fv = 10000, t = 0.5, n = 100){
dt <- t/n
# if paths is a matrix
if (!is.null(ncol(paths))){
pv <- fv*(exp(-apply(paths[,2:ncol(paths)]*dt, 1, sum)))
} else{
# deal with a single paths
pv <- fv*(exp(sum(paths[2:length(paths)]*dt)))
}
return(pv)
}
# function to simulate interest rate paths
rPaths <- function(r0 = 0.05, alpha = 0.36, beta = -5.86, sig = 0.36, gamma = 2, t = 0.5, nSim = 1000, n = 100){
dt <- t/n
sim <- list()
for (i in 1:(nSim/2)){
# generate Brownian motion for the path
dw <- sqrt(dt)*rnorm(n)
# simulate the rate paths
r_sim1 <- rep(r0,n)
r_sim2 <- rep(r0,n)
for (s in 2:n){
# create anthithetic paths
r_sim1[s] <- r_sim1[s-1] + (alpha+beta*r_sim1[s-1])*dt + sig*r_sim1[s-1]^gamma*dw[s-1]
r_sim2[s] <- r_sim2[s-1] + (alpha+beta*r_sim2[s-1])*dt - sig*r_sim2[s-1]^gamma*dw[s-1]
}
sim_i <- list(r_sim1, r_sim2)
sim <- append(sim, sim_i)
}
out <- matrix(unlist(sim), nSim, n, byrow = T)
return(out)
}
# price european put on zero coupon bonds
zcPut <- function(paths_before, k = 9800, exerT = 0.5, termT = 1, mSim = 100){
option <- c()
for (i in 1:ncol(paths_before)){
paths_after <- rPaths()
bond_exerT <- zcBond(paths_after)
payoff <- ifelse(bond_exerT<k, k-bond_exerT, 0)
option[i] <- mean(zcBond(paths_before[i,], payoff))
}
return(option)
}
# main
paths <- rPaths()
mean(zcPut(paths))
##### Final 4 #####
# stock and exchange rate paths generator
sExPaths <- function(s0=6000, e0=0.0096, r = 0.05, q = 0, rf = 0.04, sig1 = 0.1, sig2 = 0.15, gamma = -0.04, lambda = 1.5, t = 1, nSim = 1000, n = 100){
dt <- t/n
s_list <- list()
e_list <- list()
rho = -0.25*dt
for (i in 1:nSim){
dz1 <- rnorm(n)
dz2 <- rnorm(n)
# find correlated Brownian Motions
dw <- sqrt(dt)*dz1
db <- sqrt(dt)*(rho*dz1+sqrt((1-rho^2))*dz2)
# find Possion jumps
dj <- rpois(n, lambda*dt)
# paths generateion
s_sim <- rep(s0,n+1)
e_sim <- rep(e0,n+1)
for (s in 2:(n+1)){
# stock path
s_sim[s] <- s_sim[s-1]*(1 + (r - q)*dt + sig1*(dw[s-1]) + gamma*dj[s-1])
# exchange rate paths
e_sim[s] <- e_sim[s-1]*(1 + (r - rf)*dt + sig2*db[s-1])
}
s_list <- append(s_list, s_sim)
e_list <- append(e_list, e_sim)
}
s_mat <- matrix(unlist(s_list), nSim, n+1, byrow = T)
e_mat <- matrix(unlist(e_list), nSim, n+1, byrow = T)
return(list(St = s_mat, Et = e_mat))
}
# function to price the call option on stock and exchange rate
sExCall <- function(twoPaths, k = 60, r = 0.05, t = 1){
ST <- twoPaths$St[, ncol(twoPaths$St)]
ET <- twoPaths$Et[, ncol(twoPaths$Et)]
payoffs <- ifelse(ST*ET>k, ST*ET-k, 0)
return(exp(-r*t)*mean(payoffs))
}
# main
# find the paths
paths <- sExPaths()
# find the call price
sExCall(paths)
